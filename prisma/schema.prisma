// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model GovernanceAuthority {
  id               String                @id @default(uuid())
  name             String
  did              String                @unique
  type             String?
  serviceEndpoint  String?               @unique
  relatedAuthorities String[]
  entities         Entity[]
  namespaces       Namespace[]
  assuranceLevels  AssuranceLevel[]
  schemas          Schema[] 
}

model Entity {
  id                    String            @id @default(uuid())
  name                  String
  did                   String            @unique
  type                  EntityType
  governanceAuthorityId String
  governanceAuthority   GovernanceAuthority @relation(fields: [governanceAuthorityId], references: [id])
  namespaceId           String
  namespace             Namespace         @relation(fields: [namespaceId], references: [id])
  assuranceLevelId      String
  assuranceLevel        AssuranceLevel    @relation(fields: [assuranceLevelId], references: [id])
  onboardedAt           DateTime          @default(now())
  schemas               Schema[]
  attributes            Json? 
  authorization         AuthorizationStatus
}

model Schema {
  id              String       @id @default(uuid())
  name            String
  type            SchemaType
  w3cUri          String?
  anonCredsSchemaId String?
  entityId        String?
  entity          Entity?      @relation(fields: [entityId], references: [id])
  governanceAuthorityId String
  governanceAuthority   GovernanceAuthority  @relation(fields: [governanceAuthorityId], references: [id])
}

model Namespace {
  id                    String               @id @default(uuid())
  name                  String               @unique
  governanceAuthorityId String
  governanceAuthority   GovernanceAuthority  @relation(fields: [governanceAuthorityId], references: [id])
  entities              Entity[]
}

model AssuranceLevel {
  id                    String               @id @default(uuid())
  name                  String
  level                 Int
  governanceAuthorityId String
  governanceAuthority   GovernanceAuthority  @relation(fields: [governanceAuthorityId], references: [id])
  entities              Entity[]
}

enum EntityType {
  ISSUER
  VERIFIER
  TRUST_REGISTRY
}

enum SchemaType {
  W3C
  ANONCREDS
}

enum AuthorizationStatus {
  NOT_FOUND
  CURRENT
  EXPIRED
  TERMINATED
  REVOKED
}